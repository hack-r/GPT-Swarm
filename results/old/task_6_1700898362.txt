"In R language, you can utilize the `socketConnection` function available from the `base` package to create network socket connections. Here is an example of how you might structure a simple socket server:\n\n```R\n# Import necessary library\nlibrary(parallel)\n\n# Define server socket details\nserver <- function(port = 5000) {\n  \n  # Create a server socket\n  con <- socketConnection(port = port, server = TRUE, blocking = TRUE, open = \"r+\")\n  \n  cat(\"Server started and listening on port\", port, \"\\n\")\n  \n  # Stay alive\n  while(TRUE) {\n    # Read 1024 bytes of data from the client\n    data <- readLines(con, n = 1024)\n    \n    # Handle messages\n    if(length(data) > 0) {\n      cat(\"Received data: \", data, \"\\n\")\n      \n      # Send received message back to client\n      writeLines(data, con)\n    }\n  }\n  \n  # Close the connection\n  close(con)\n  cat(\"Server stopped.\", \"\\n\")\n}\n\n# Start the server\nserver()\n```\n\nThis simple server program will listen on a specified port until the connection is closed. When data is received from a connected client, the server will print it to the console and then echo it back to the client. Be careful: this code will continue running indefinitely until manually interrupted because of the `while(TRUE)` loop.\n\nRemember to replace `5000` in `port=5000` with the actual port you want to open for connection. \n\nPlease also consider that standard R scripts are executed sequentially, and this function will block the rest of your script until manually interrupted or an error occurs."