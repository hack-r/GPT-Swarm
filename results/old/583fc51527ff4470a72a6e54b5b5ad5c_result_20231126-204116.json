"1. **Definition**\nA prime number is a natural number greater than one that has no positive divisors other than one and itself. The first six prime numbers are 2, 3, 5, 7, 11, and 13. In other words, a prime number is a number that is not the product of two smaller natural numbers. \n\n2. **Function to Validate Prime Numbers**\nA general method to check if a number is prime is to iterate through all numbers from 2 up to the square root of the number. If the number can be divided evenly (no remainder) by any of these numbers, it's not a prime number.\n\nHere is an example of a function in Python:\n\n```python\ndef is_prime(n):\n    if n <= 1:\n       return False\n    elif n <= 3:\n       return True\n    elif n % 2 == 0 or n % 3 == 0:\n       return False\n\n    i = 5\n    while i * i <= n:\n       if n % i == 0 or n % (i + 2) == 0:\n           return False\n       i += 6\n    return True\n```\n\n3. **Process to Determine Primes Up to a Given Point**\n\nWe can create a loop from 2 to the given number and call the function created above to check if each number in the loop is a prime number.\n\n```python\ndef prime_numbers_upto(n):\n    primes = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n```\n\nThe function `prime_numbers_upto(n)` returns all prime numbers up to `n`.\n\n4. **Storing Each Prime Number**\n\nIn the `prime_numbers_upto(n)` function above, each prime number found is saved in the `primes` list.\n\n5. **Testing and Validation**\n\nWe can test and validate our function `prime_numbers_upto(n)` by calling it with different numbers and checking the output. Here's an example:\n\n```python\nprime_numbers_upto(20)\n```\n\nThe output should be `[2, 3, 5, 7, 11, 13, 17, 19]`, which are the prime number up to 20."