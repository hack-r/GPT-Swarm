"It seems like you didn't mention any programming language but I am going to assume that you asked about how we can solve this problem by using programming to generate some musical patterns, chord progressions, and arrangements. I'll show you an example using a Python package called `mingus`.\n\n`mingus` is a package for Python used for creating music. It includes functionality for working with notes, chords, keys and scales. We can use it to create chord progressions.\n\nHere's an example of how you might accomplish this:\n\n```python\nfrom mingus.containers import Note, NoteContainer, Bar, Composition, Track\nfrom mingus.containers.instrument import Instrument, Piano\nfrom mingus.extra import lilypond\n\n# define your own chords\nchord_1 = NoteContainer(['C', 'E', 'G'])\nchord_2 = NoteContainer(['G', 'B', 'D'])\nchord_3 = NoteContainer(['E', 'G', 'B'])\nchords_progression = [chord_1, chord_2, chord_3]\n\n# create song with chord progression\ndef create_song(chords_progression):\n    piano = Piano()\n    track = Track(piano)\n    bar = Bar()\n    \n    for chord in chords_progression:\n        bar.place_notes(chord, 4)\n\n    track + bar\n    composition = Composition()\n    composition.add_track(track)\n    return composition\n\nsong = create_song(chords_progression)\n\n# you can output your song to a MIDI file or LilyPond file\nlilypond.to_png(song, \"song_arrangement\")\n\n# OR\n\nmidi_file = MidiFile()\nmidi_track = MidiTrack()\nmidi_file.tracks.append(midi_track)\nlilypond.to_midi(song)\n\nmidi_file.save(\"song_arrangement.midi\")\n```\n\nPlease note that `mingus` doesn't output sound itself, but you can use `.midi` file in any MIDI player to listen to the created songs. To go much deeper, you might need artificial intelligence for creating more complex songs. Also, music theory can get complicated really quickly, hence knowing it would be extremely beneficial for a project such as this."