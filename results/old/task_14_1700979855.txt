"Creating an automatic system to create network diagrams in R would likely involve a combination of packages to generate network diagrams (like `igraph` or `networkD3`), getting the latest data (potentially web scraping or through an API), and automating the script.\n\nHere's some example code that represents the concept for a simple network graph using `igraph`. This won't be exact, as we don't know your specific network details or how is it changing over the time.\n\n```R\n# Load library\nlibrary(igraph)\n\n# This is a placeholder to import data. You'd replace this with whichever way you're gathering your network data.\n# It could be a CSV file, web scraped data, a database query, an API call, etc.\nimport_data <- function() {\n  return(read.csv(\"network_data.csv\"))\n}\n\ncreate_network_graph <- function(data) {\n  # create a graph from the data frame\n  g <- graph.data.frame(data, directed=FALSE)\n  \n  # plot the graph\n  plot.igraph(g)\n}\n\nwhile(TRUE) {\n  data <- import_data()\n  create_network_graph(data)\n  \n  # Sleep for a certain amount of time before next update.\n  Sys.sleep(60*60)  # 1 hour\n}\n```\n\nIn this script, the `while(TRUE)` loop ensures that the import, creation of the network diagram, and plotting steps continue indefinitely.\n\n`Sys.sleep(60*60)` makes the script wait for an hour before repeating (you can adjust this to whatever frequency you prefer for updates).\n\nKeep in mind that an infinite loop like this will run forever until manually stopped or until there's an error. Also, to run this script automatically, you would have to set up a task scheduler in your computer to execute this file.\n\nThis is a general example, as you would need to customize the `import_data` function and `create_network_graph` functions to suit your specific needs and data.\n\nAlso note that this simplistic approach does not handle errors and interruptions at all, so consider that you may want to add some error handling to it.\n"