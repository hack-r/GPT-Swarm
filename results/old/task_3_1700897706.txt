"Creating a module to handle stopwatch operations in R can be done by defining custom functions. The module would include functions to start, stop, and reset the stopwatch.\n\n```r\n# Stopwatch module\n\n# Store the start time\nstart_time <- NULL\n\n# Start the stopwatch\nstart_stopwatch <- function() {\n  start_time <<- Sys.time() # Store the start time\n  print(\"Stopwatch started.\")\n}\n\n# Stop the stopwatch and return the elapsed time\nstop_stopwatch <- function() {\n  if (is.null(start_time)) {\n    stop(\"Stopwatch has not been started.\")\n  }\n  \n  end_time <- Sys.time() # Store the end time\n  elapsed_time <- end_time - start_time\n  start_time <<- NULL # Reset the start time\n   \n  print(\"Stopwatch stopped.\")\n  return(elapsed_time)\n}\n\n# Reset the stopwatch\nreset_stopwatch <- function() {\n  start_time <<- NULL # Reset the start time\n  print(\"Stopwatch reset.\")\n}\n```\n\nThese functions can be used to measure elapsed time:\n\n```r\n# Start the stopwatch\nstart_stopwatch()\n\n# ... Code that you want to time ...\n\n# Stop the stopwatch\nelapsed_time <- stop_stopwatch()\nprint(elapsed_time)\n\n# Reset the stopwatch\nreset_stopwatch()\n``` \n\nPlease note that the stopwatch is a simplistic version, it simply calculates the difference between the time at which 'start' function is hit and 'stop' function is hit, it doesn't count the 'idle' time. If you want the precise time of your code execution, consider using `system.time` function."