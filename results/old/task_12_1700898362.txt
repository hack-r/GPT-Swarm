"Sorry for the confusion, but the R programming language isn't suitable for packet inspection and networking-related tasks as it's primarily used for statistical computing and graphics.\n\nTo perform lower-level networking tasks like inspecting and filtering network IP packets, we generally use Python in combination with networking libraries like Scapy or other tools designed for this purpose such as firewall tools or the packet filtering capabilities built into Linux kernels.\n\nIf you are open to using Python, below is a simplified example for your reference. However, please note that you would also need root or administrative privileges to capture network packets and run this script. Here is an example using the Scapy library:\n\n```python\nfrom scapy.all import *\nfrom collections import namedtuple\n\n# Define the structure for whitelist entries\nWhitelistEntry = namedtuple('WhitelistEntry', ['ip', 'port'])\n\n# Define a whitelist with entries\nwhitelist = set([\n    WhitelistEntry(ip='192.168.1.1', port=80),\n    # Add more IP and port combinations as required\n])\n\ndef packet_callback(packet):\n    if IP in packet and TCP in packet:\n        source_ip = packet[IP].src\n        source_port = packet[TCP].sport\n        \n        if WhitelistEntry(ip=source_ip, port=source_port) in whitelist:\n            print(f'Accepted packet from {source_ip}:{source_port}')\n        else:\n            print(f'Rejected packet from {source_ip}:{source_port}')\n\ndef main():\n    # Start packet sniffing\n    sniff(prn=packet_callback)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nIn this code, we define a list of acceptable (whitelisted) IP:port pairs. Whenever a packet is received, it checks the source IP and port against the ones in the whitelist. If it's in the whitelist, it accepts the packet; otherwise, it rejects it.\n\nPlease adjust the code according to your specific needs. Also, make sure Python and Scapy are correctly installed and configured on your machine before running the script. \n\nActual packet forwarding/dropping would ideally need a more robust toolset like network firewalls or utilities directly interacting with the network stack of your operating system."